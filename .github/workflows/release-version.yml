name: Release Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.3.0 for minor release, 2.0.0 for major; leave empty for auto-patch-increment)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  packages: read

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    outputs:
      main_version: ${{ steps.main-version.outputs.version }}
      new_version: ${{ steps.new-version.outputs.version }}
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v5
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Get latest tag from main
        id: main-version
        run: |
          # Get latest version tag on main branch (only tags matching v[0-9]*)
          git fetch origin main --tags
          MAIN_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*" origin/main 2>/dev/null || echo "v0.0.0")
          MAIN_VERSION=${MAIN_TAG#v}  # Strip 'v' prefix
          echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "Latest version on main: $MAIN_VERSION"

      - name: Determine new version
        id: new-version
        run: |
          MAIN_VERSION="${{ steps.main-version.outputs.version }}"
          
          # Check if user provided a version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # User-provided version takes precedence
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "User provided version: $NEW_VERSION"
          else
            # Auto-increment patch version from main
            NEW_VERSION=$(echo $MAIN_VERSION | awk -F. -v OFS=. '{$NF++;print}')
            echo "Auto-incremented version: $NEW_VERSION"
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New release version will be: $NEW_VERSION"

      - name: Create release branch
        id: create-branch
        run: |
          BRANCH_NAME="release-v${{ steps.new-version.outputs.version }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Make sure we're on dev branch
          git checkout dev
          
          # Create a new branch from dev (no pom.xml changes needed!)
          git checkout -b $BRANCH_NAME
          
          # Configure git for later steps
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Created release branch $BRANCH_NAME from dev (no file changes needed)"

      - name: Configure Maven settings for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Install common library locally
        working-directory: ismd-backend-validator
        run: ./mvnw -f ../ismd-validator-common/pom.xml -DskipTests install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        working-directory: ismd-backend-validator
        run: |
          # Build and run tests to ensure the release is stable
          ./mvnw clean test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push release branch
        run: |
          # Only push if tests pass
          git push origin ${{ steps.create-branch.outputs.branch_name }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if PR already exists
          BRANCH_NAME="${{ steps.create-branch.outputs.branch_name }}"
          PR_EXISTS=$(gh pr list --head $BRANCH_NAME --base main --json number --jq 'length')
          
          if [ "$PR_EXISTS" = "0" ]; then
            # Create new PR
            gh pr create \
              --title "Release v${{ steps.new-version.outputs.version }}" \
              --body "# Release v${{ steps.new-version.outputs.version }}
          
              This PR merges changes from dev into main for release v${{ steps.new-version.outputs.version }}.
          
              ## What happens after merge:
              1. Git tag \`v${{ steps.new-version.outputs.version }}\` will be created automatically
              2. Docker images will be built with version \`${{ steps.new-version.outputs.version }}\`
              3. Deployment to TEST environment will be triggered
              4. Dev branch will be synced with main (clean merge, no file changes)
          
              **Note:** Version is managed via Git tags, no pom.xml changes needed." \
              --base main \
              --head $BRANCH_NAME
          
            echo "Created new PR from $BRANCH_NAME to main"
          else
            # PR already exists, just update the description
            PR_NUMBER=$(gh pr list --head $BRANCH_NAME --base main --json number --jq '.[0].number')
          
            gh pr edit $PR_NUMBER \
              --title "Release v${{ steps.new-version.outputs.version }}" \
              --body "# Release v${{ steps.new-version.outputs.version }}
          
              This PR merges changes from dev into main for release v${{ steps.new-version.outputs.version }}.
          
              ## What happens after merge:
              1. Git tag \`v${{ steps.new-version.outputs.version }}\` will be created automatically
              2. Docker images will be built with version \`${{ steps.new-version.outputs.version }}\`
              3. Deployment to TEST environment will be triggered
              4. Dev branch will be synced with main (clean merge, no file changes)
          
              **Note:** Version is managed via Git tags, no pom.xml changes needed.
          
              *Updated on $(date)*"
          
            echo "Updated existing PR #$PR_NUMBER"
          fi
