name: Build Docker on Main

on:
  push:
    branches:
      - main
    # Blacklist approach - ignore these paths
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - '**/*.md'
      - '**/.gitkeep'
      - '**/LICENSE'
      - '**/target/**'
      - '**/.idea/**'
      - '**/*.iml'

permissions:
  contents: read
  packages: write

jobs:
  # Create Git tag for the release
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      should_build: ${{ steps.determine-version.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Determine version and create tag
        id: determine-version
        run: |
          # Check if this is a release PR merge by looking at the PR title
          PR_TITLE="${{ github.event.head_commit.message }}"
          
          if [[ "$PR_TITLE" =~ Release\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Detected release version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
            
            # Create and push the tag
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "v$VERSION"
            git push origin "v$VERSION"
            
            echo "Created and pushed tag v$VERSION"
          else
            echo "Not a release PR, skipping tag creation"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
  
  # Build Docker image for main branch
  build-validator:
    needs: create-tag
    if: needs.create-tag.outputs.should_build == 'true'
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      branch: main
      version: ${{ needs.create-tag.outputs.version }}
      
  # Sync dev with main after Docker build
  sync-dev:
    needs: build-validator
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history
      
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin git@github.com:${{ github.repository }}.git
      
      - name: Merge main into dev
        run: |
          # Fetch latest branches
          git fetch origin main
          git fetch origin dev
          
          # Checkout dev
          git checkout dev
          
          # Get version that was just released
          VERSION="${{ needs.create-tag.outputs.version }}"
          echo "Merging release v$VERSION into dev..."
          
          # Merge main into dev (should be clean since release came from dev)
          if git merge origin/main -m "Merge main into dev after release v$VERSION" --no-edit; then
            echo "✅ Merge successful"
          else
            echo "⚠️ Merge conflicts detected. Manual resolution required."
            echo "This is unexpected - release branch came from dev."
            echo "Please check and resolve conflicts manually."
            exit 1
          fi
          
          # Push to dev
          echo "Pushing merged dev branch..."
          git push origin dev
          
          echo "✅ Dev branch synced with main after release v$VERSION"
          echo "Note: Versions are managed via Git tags, no pom.xml changes needed"
