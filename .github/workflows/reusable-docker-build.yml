name: Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch name (main or dev)'
        required: true
        type: string
      version:
        description: 'Version to use (from Git tag), leave empty to auto-detect'
        required: false
        type: string
        default: ''

permissions:
  contents: read
  packages: write

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history to get tags

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with: 
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up repository path
        id: repo-setup
        run: |
          # Convert repository name to lowercase and set as base path
          REPO_PATH=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Append branch suffix for non-main branches
          if [ "${{ inputs.branch }}" != "main" ]; then
            REPO_PATH="${REPO_PATH}-${{ inputs.branch }}"
          fi
          
          echo "REPO_PATH=${REPO_PATH}" >> $GITHUB_ENV

      - name: Get version info
        id: version
        run: |
          # If version provided via input, use it
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
            echo "Using provided version: $VERSION"
          else
            # Get base version from latest Git tag (only tags matching v[0-9]*)
            TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo "")
            if [ -z "$TAG" ]; then
              BASE_VERSION="0.0.1"
              echo "No tags found, using default version: $BASE_VERSION"
            else
              BASE_VERSION=$(echo "$TAG" | sed 's/^v//')
              echo "Found tag: $TAG, using version: $BASE_VERSION"
            fi
            
            if [ "${{ inputs.branch }}" = "main" ]; then
              # For main, use tag version as-is
              VERSION="$BASE_VERSION"
              echo "Using version from Git tag: $VERSION"
            else
              # For dev, use tag version + SHA (tracks latest release)
              VERSION="${BASE_VERSION}-$(git rev-parse --short HEAD)"
              echo "Using dev version: $VERSION (based on latest tag $BASE_VERSION)"
            fi
          fi
          
          GIT_SHA=$(git rev-parse --short HEAD)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT
          
          echo "Final version: $VERSION (commit: $GIT_SHA)"

      - name: Build and push Docker image
        run: |
          # Use the precomputed repository path
          IMAGE_TAG="ghcr.io/${{ env.REPO_PATH }}:${{ steps.version.outputs.version }}"
          LATEST_TAG="ghcr.io/${{ env.REPO_PATH }}:latest"
          
          echo "Building validator with tags:"
          echo "  - $IMAGE_TAG"
          echo "  - $LATEST_TAG"
          
          # Determine if we should use local common library or GitHub Packages
          if [ "${{ inputs.branch }}" = "main" ]; then
            USE_LOCAL_COMMON="false"
            echo "Production build: Will download common library from GitHub Packages"
          else
            USE_LOCAL_COMMON="true"
            echo "Dev build: Will use local common library"
          fi
          
          # Build and push the image using Dockerfile in ismd-backend-validator with repo root as build context
          # Pass version to Maven via -Drevision build arg
          docker build \
            -f ismd-backend-validator/Dockerfile \
            --target runtime \
            --build-arg REVISION="${{ steps.version.outputs.version }}" \
            --build-arg MODULE_VERSION="${{ steps.version.outputs.version }}" \
            --build-arg GIT_COMMIT="${{ steps.version.outputs.git_sha }}" \
            --build-arg USE_LOCAL_COMMON="$USE_LOCAL_COMMON" \
            --build-arg GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            --build-arg GITHUB_ACTOR="${{ github.actor }}" \
            --build-arg GITHUB_REPOSITORY="${{ github.repository }}" \
            -t $IMAGE_TAG \
            -t $LATEST_TAG \
            .
          
          # Push the built images
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
          
          echo "Successfully pushed $IMAGE_TAG"
          echo "Successfully pushed $LATEST_TAG"
